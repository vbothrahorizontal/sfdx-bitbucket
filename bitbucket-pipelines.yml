# This file is a sample build configuration for SalesforceDX <> BitBucket <> Docker Pipeline
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
# Reference: https://hub.docker.com/r/salesforce/salesforcedx/tags
image: salesforce/salesforcedx:latest-full

definitions:
  steps:
    - step: &build
        name: Verify Salesforce CLI installation
        condition:
          changesets:
            includePaths:
              # Only run if anything in the force-app directory was touched
              - "force-app/**"
        script:
          - set -e # Fail on any error
          #- echo ${BITBUCKET_BRANCH^^}
          #- echo ${BITBUCKET_PR_DESTINATION_BRANCH^^}
          #- echo ${BITBUCKET_TAG^^}
          #- echo ${BITBUCKET_DEPLOYMENT_ENVIRONMENT^^}
          # Store the auth url of target org in the temp auth file
          - echo $(authURL=SFDX_AUTH_${BITBUCKET_PR_DESTINATION_BRANCH^^} && echo ${!authURL}) >> authFile.txt
          # Assign variables
          - echo "export ROOTDIR=force-app" >> local_env.sh
          - echo "export DEPLOYDIR=manifest" >> local_env.sh
          - echo "export TESTLEVEL=$TEST_LEVEL" >> local_env.sh
          - echo "export APIVERSION=$API_VERSION" >> local_env.sh
          - node --version
          #-npm install @salesforce/cli --global
          - sf --version
          - sf plugins --core
          # Install JSON processor - jq is already the newest version
          #- apt-get install -y jq
        artifacts: # define the artifacts to be passed to each future step
          - authFile.txt
          - local_env.sh

    - step: &delta
        name: Install App and Create Delta
        condition:
          changesets:
            includePaths:
              # Only run if anything in the force-app directory was touched
              - "force-app/**"
        script:
          - set -e # Fail on any error
          - echo y | sfdx plugins:install sfdx-git-delta
          - git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          - git fetch --all
          - git --no-pager diff --name-status HEAD HEAD^
          - sfdx sgd:source:delta --to HEAD --from HEAD^ --output . --api-version=$APIVERSION
        artifacts: # define the artifacts to be passed to each future step
          - package/**
          - destructiveChanges/**

    - step: &validate
        name: Validate metadata to target org
        condition:
          changesets:
            includePaths:
              # Only run if anything in the force-app directory was touched
              - "force-app/**"
        script:
          - set -e # Fail on any error
          - echo "Pull Request Validation"
          # Authorize target org using an SFDX auth URL stored within a file and set it as the default username that all commands run against
          #- cat authFile.txt
          - sfdx auth:sfdxurl:store -f authFile.txt -s -a target-org
          # use the artifact to get the variables set in the validate step
          #- cat local_env.sh
          - source local_env.sh
          - if [ $BITBUCKET_PR_DESTINATION_BRANCH == 'qa' ]; then
          - echo "--- Delta metadata validation against the QA org ---"
          - echo y | sfdx plugins:install sfdx-git-delta
          - git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          - git fetch --all
          - git --no-pager diff --name-status HEAD origin/qa
          - sfdx sgd:source:delta --to HEAD --from origin/qa --output . --api-version=$APIVERSION
          - cat package/package.xml
          # Convert Metadata
          - sf project convert source --output-dir $DEPLOYDIR --manifest=package/package.xml
          # Run validation to target deployment org and run unit tests
          - sf project deploy start --metadata-dir $DEPLOYDIR --test-level $TESTLEVEL --dry-run --target-org target-org --wait 10 --ignore-warnings
          - cat destructiveChanges/destructiveChanges.xml
          # Run validation to target deployment org and run unit tests
          - sf project deploy start --metadata-dir destructiveChanges --test-level $TESTLEVEL --dry-run --target-org target-org --wait 10 --ignore-warnings
          - else
          - echo "--- All metadata validation against the org ---"
          # Convert Metadata
          - sf project convert source --root-dir $ROOTDIR --output-dir $DEPLOYDIR
          # Run validation to target deployment org and run unit tests
          - sf project deploy start --metadata-dir $DEPLOYDIR --test-level $TESTLEVEL --dry-run --target-org target-org --wait 10 --ignore-warnings
          - fi

    - step: &deploy
        name: Deploy metadata to target org
        condition:
          changesets:
            includePaths:
              # Only run if anything in the force-app directory was touched
              - "force-app/**"
        deployment: qa
        script:
          - set -e # Fail on any error
          # Authorize target org using an SFDX auth URL stored within a file and set it as the default username that all commands run against
          - echo $SFDX_AUTH_URL >> /tmp/authFile.txt
          - sfdx auth:sfdxurl:store -f /tmp/authFile.txt -s -a target-org
          # use the artifact to get the variables set in the build step
          #- cat local_env.sh
          - source local_env.sh
          # use the artifact to get the files set in the delta step
          - echo "--- package.xml generated with added and modified metadata ---"
          - cat package/package.xml
          # Convert Metadata
          - sf project convert source --output-dir $DEPLOYDIR --manifest=package/package.xml
          # Deploy to target deployment org and run unit tests
          - sf project deploy start --metadata-dir $DEPLOYDIR --test-level $TESTLEVEL -u target-org --wait 10 --ignore-warnings
          - echo "--- destructiveChanges.xml generated with deleted metadata ---"
          - cat destructiveChanges/destructiveChanges.xml
          # Deploy to target deployment org and run unit tests
          - sf project deploy start --metadata-dir destructiveChanges --test-level $TESTLEVEL -u target-org --wait 10 --ignore-warnings

pipelines:
  pull-requests:
    "**": #this runs as default for any branch not elsewhere defined
      - step: *build
      - step: *validate

  branches: #these will run on every push of the branch
    qa:
      - step: *build
      - step: *delta
      - step:
          <<: *deploy
          deployment: qa
    uat:
      - step: *build
      - step: *delta
      - step:
          <<: *deploy
          deployment: uat
    master:
      - step: *build
      - step: *delta
      - step:
          <<: *deploy
          deployment: master
  #default: #These commands run for all branches unless specified otherwise
  #- step:
  #name: Skip running pipeline
  #script:
  #- echo "Commited changes to a branch that does not match the listed branches in bitbucket-pipelines.yml."
  #- echo "You can skip running pipeline by adding [skip ci] or [ci skip] (with []) to the git commit message."
  #- sf --version
  #- sf plugins --core
  #Example shows how to run validation to target deployment org and run unit tests
  #- sf project deploy start --metadata-dir $DEPLOYDIR --test-level $TESTLEVEL --dry-run --target-org target-org --wait 10
  #Example shows how to deploy to target deployment org and run unit tests
  #- sf project deploy start --metadata-dir $DEPLOYDIR --test-level $TESTLEVEL -u target-org --wait 10
  #Example shows how to run unit tests on org
  #- sf apex test run --target-org target-org --wait 10 --result-format tap --code-coverage --test-level $TESTLEVEL
  #Example shows how to run specified tests on org during deployment
  #TEST_CLASSES: list of comma separated unit test class names, e.g. MyClassTest,YourClassTest
  #- sf project deploy start --metadata-dir $DEPLOYDIR --test-level RunSpecifiedTests -r $TEST_CLASSES -u target-org --wait 10
